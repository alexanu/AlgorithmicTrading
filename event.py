"""
This is the overarching event class that creates MarketEvent, SignalEvent, OrderEvent, and FillEvent subclasses
to be used by the backtesting framework.
"""

class Event(object):
        """
        Base Event class which all other events fall under - allows easy interaction between all python
        scripts in the project.
        """
        
        pass

class MarketEvent(Event):
        """
        Event used to handle receipt of new market data.
        """
        
        def __init__(self):
            self.type = 'MARKET'

class SignalEvent(Event):
        """
        Event generated by the trading strategy that is passed to the Portfolio to create a corresponding order.
        The parameters used in SignalEvent objects are ticker (i.e AAPL), datetime (time at which signal was created),
        and signal_direction (whether the strategy recommends a long or a short position in the security).
        """

        def __init__(self, ticker, datetime, signal_direction):
            self.type = 'SIGNAL'
            self.ticker = ticker
            self.datetime = datetime
            self.signal_direction = signal_direction

class OrderEvent(Event):
        """
        Event created from a received SignalEvent, which also includes a quantity parameter indicating the amount
        of security to be traded - this quantity is determined by the Portfolio class after receiving the SignalEvent.
        Does not include the time of the order, since the time is unknown until we actually fill the order (FillEvent). 
        """

        def __init__(self, ticker, order_type, order_direction, quantity):
            self.type = "ORDER"
            self.ticker = ticker
            self.order_type = order_type
            self.order_direction = order_direction
            self.quantity = quantity

class FillEvent(Event):
        """
        Event received when the order is successfully filled.
        """

        def __init__(self, ticker, datetime, exchange, direction, price, quantity, commission):
            self.type = 'FILL'
            self.ticker = ticker
            self.datetime = datetime
            self.exchange = exchange
            self.direction = direction
            self.price = price
            self.quantity = quantity

            if commission is None:
                self.commission = self.calculate_commission()
            else:
                self.commission = commission
            
            def calculate_commission(self):
                """
                If we were to implement this event driven system for live trading sessions, a brokerage
                with a relatively easy-to-use API is Interactive Brokers. For now, we will use their 
                formula for calculating commission.
                """

                

